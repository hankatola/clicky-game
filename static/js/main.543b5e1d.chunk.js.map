{"version":3,"sources":["logo.svg","components/Jumbotron.js","components/grid.js","components/ClickImage.js","components/ImageArray.js","components/Modal.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","_ref","children","react_default","a","createElement","style","height","clear","paddingTop","textAlign","className","Container","fluid","concat","Row","_ref2","Col","_ref3","size","ClickImage","props","width","src","imageFileName","name","onClick","clickEvent","ImageArray","rows","cols","makeCols","columnsXml","c","push","components_ClickImage","imageFileNames","i","rowsXml","r","makeRowsThenCols","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","index_es","closeModal","onClose","close","center","message","React","Component","Game","componentDidMount","setState","shuffledFileArray","max","n","arguments","length","undefined","numbers","returnArray","fileName","splice","Math","floor","random","event","target","clicked","indexOf","score","highScore","openModal","modal","components_Jumbotron","components_ImageArray","Modal_App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.543b5e1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n      className=\"jumbotron\"\r\n    >\r\n      <div className=\"bgImage\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return (\r\n    <div\r\n      className={`container${fluid ? \"-fluid\" : \"\"}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return (\r\n    <div\r\n      className={`row${fluid ? \"-fluid\" : \"\"}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className=\"col\"\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction ClickImage(props) {\r\n  return (\r\n    <div className=\"\"  width=\"395\" height=\"270\">\r\n        <img\r\n          src={props.imageFileName}\r\n          name={props.imageFileName}\r\n          onClick={props.clickEvent}\r\n          height=\"250\"\r\n          width=\"375\"\r\n        ></img>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClickImage","import React from 'react'\r\nimport { Col, Row } from \"./grid\"\r\nimport ClickImage from './ClickImage'\r\n\r\nfunction ImageArray(props) {\r\n  /*\r\n    Expects an array of filenames & returns a list of xml rows & columns & images\r\n  */\r\n  const rows = props.rows || 3\r\n  const cols = props.cols || 4\r\n  // Function Farm\r\n  const makeRowsThenCols = () => {\r\n    const rowsXml = []\r\n    for (let r = 0; r < rows; r++) {\r\n      rowsXml.push(\r\n        <Row>\r\n          {makeCols()}\r\n        </Row>\r\n      )\r\n    }\r\n    return rowsXml\r\n  }\r\n  const makeCols = () => {\r\n    const columnsXml = []\r\n    for (let c = 0; c < cols; c++) {\r\n      columnsXml.push(\r\n        <Col>\r\n          <ClickImage imageFileName={props.imageFileNames[i]} clickEvent={props.clickEvent}/>\r\n        </Col>\r\n      )\r\n      i++\r\n    }\r\n    return columnsXml\r\n  }\r\n  let i = 0\r\n  return makeRowsThenCols()\r\n}\r\n\r\nexport default ImageArray","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-responsive-modal';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      open: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { open } = this.state;\r\n    return (\r\n      <div>\r\n        <Modal\r\n          open={this.props.open}\r\n          onClick={this.closeModal}\r\n          onClose={this.props.close}\r\n          center\r\n        >\r\n          <h2>{this.props.message}</h2>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport Jumbotron from \"./Jumbotron\"\r\nimport { Container } from \"./grid\"\r\nimport ImageArray from './ImageArray'\r\nimport ModalMessage from './Modal'\r\n\r\n\r\nclass Game extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      clicked: [],\r\n      imageFileNames: [],\r\n      score: 0,\r\n      highScore: 0,\r\n      modal: {\r\n        message: \"\",\r\n        open: false\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({\r\n      imageFileNames: this.shuffledFileArray()\r\n    })\r\n  }\r\n\r\n  shuffledFileArray = (n = 12) => {\r\n    //  returns shuffled array of filenames for ClickImage\r\n    const randInt = max => {\r\n      return Math.floor(Math.random() * max)\r\n    }\r\n    const numbers = []\r\n    const returnArray = []\r\n    for (let i = 1; i <= n; i++) numbers.push(i)\r\n    // create fileName with random element removed from numbers & push fileName to returnArray\r\n    for (let i = 0; i < n; i++) {\r\n      const fileName = `./images/${numbers.splice( randInt( numbers.length ), 1)[0]}.jpg`\r\n      returnArray.push( fileName )\r\n    }\r\n    return returnArray\r\n  }\r\n\r\n  clickEvent = event => {\r\n    const name = event.target.name\r\n    if (this.state.clicked.indexOf(name) < 0) {\r\n      // image hasn't been clicked before, increment score & record click\r\n      this.state.clicked.push(name)\r\n      this.setState({\r\n        score: this.state.score + 1,\r\n        highScore: Math.max(this.state.highScore, this.state.score + 1)\r\n      })\r\n      if (this.state.clicked.length === 12) {\r\n        this.setState({\r\n          score: 0,\r\n          clicked: []\r\n        })\r\n        this.openModal(\"You got them all! \")\r\n      }\r\n    } else {\r\n      // image has been clicked before. Reset\r\n      this.setState({\r\n        score: 0,\r\n        clicked: []\r\n      })\r\n      this.openModal(\"You clicked that one already!\")\r\n    }\r\n    // shuffle images\r\n    this.setState({\r\n      imageFileNames: this.shuffledFileArray()\r\n    })\r\n  }\r\n\r\n  openModal = message => {\r\n    message = message || ''\r\n    this.setState({\r\n      modal: {\r\n        message: message,\r\n        open: true\r\n      }\r\n    })\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.setState({\r\n      modal: {open: false}\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Jumbotron>\r\n          <h1>B-1b Memory Game!</h1>\r\n          <h3>Score: {this.state.score}</h3>\r\n          <h6>High Score: {this.state.highScore}</h6>\r\n        </Jumbotron>\r\n        <ImageArray\r\n          imageFileNames={this.state.imageFileNames}\r\n          clickEvent={this.clickEvent}\r\n        />\r\n        <ModalMessage\r\n          open={this.state.modal.open}\r\n          message={this.state.modal.message}\r\n          close={this.closeModal}\r\n        />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport logo from './logo.svg';\nimport './styles/App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}